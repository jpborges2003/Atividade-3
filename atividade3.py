# -*- coding: utf-8 -*-
"""atividade3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R1uW2eNEl-PzlXFlGGlCrUOUf6GUGyAy
"""

# Dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY . /app

RUN pip install --no-cache-dir fastapi uvicorn pandas scikit-learn numpy

EXPOSE 8000

CMD ["uvicorn", "Atividade 2:app", "--host", "0.0.0.0", "--port", "8000"]


# docker-compose.yml
version: '3.8'
services:
  recomendador:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    restart: always


# README.md
# Sistema de Recomendacao Educacional

Este projeto implementa um sistema de recomendacao hibrido com FastAPI e Docker.

## Como executar

1. Clonar o repositório
```bash
git clone <url-do-repo>
cd <nome-da-pasta>
```

2. Subir com Docker:
```bash
docker-compose up --build
```

3. Acesse a API:
```
http://localhost:8000/docs
```

## Endpoints
- POST `/recomendacao/conteudo` - Recomendacao baseada em conteudo
- POST `/recomendacao/colaborativa` - Recomendacao colaborativa
- POST `/recomendacao/hibrida` - Combina as duas abordagens
- POST `/alunos` - Adiciona novo aluno
- PUT `/alunos/{id_aluno}` - Atualiza preferências do aluno

## Exemplo de Requisição
```json
{
  "id_aluno": 1,
  "limite": 5
}
```

## Estrutura dos Arquivos
- `dados_alunos.csv`: Informacoes dos alunos
- `interacoes.csv`: Historico de interacoes com materiais
- `materiais_didaticos.csv`: Dados dos materiais educacionais


# test_main.py
import pytest
from fastapi.testclient import TestClient
from Atividade_2 import app

client = TestClient(app)

def test_conteudo():
    response = client.post("/recomendacao/conteudo", json={"id_aluno": 1, "limite": 3})
    assert response.status_code == 200
    assert isinstance(response.json(), list)

def test_colaborativa():
    response = client.post("/recomendacao/colaborativa", json={"id_aluno": 1, "limite": 3})
    assert response.status_code == 200
    assert isinstance(response.json(), list)

def test_hibrida():
    response = client.post("/recomendacao/hibrida", json={"id_aluno": 1, "limite": 3})
    assert response.status_code == 200
    assert isinstance(response.json(), list)


# Extras para o Atividade 2.py
# Adicione no final:

from fastapi import HTTPException

@app.post("/alunos")
async def adicionar_aluno(aluno: dict):
    novo_id = df_alunos['id_aluno'].max() + 1
    aluno['id_aluno'] = novo_id
    global df_alunos
    df_alunos = pd.concat([df_alunos, pd.DataFrame([aluno])], ignore_index=True)
    return {"mensagem": "Aluno adicionado", "id_aluno": novo_id}

@app.put("/alunos/{id_aluno}")
async def atualizar_interesses(id_aluno: int, atualizacao: dict):
    idx = df_alunos.index[df_alunos['id_aluno'] == id_aluno].tolist()
    if not idx:
        raise HTTPException(status_code=404, detail="Aluno nao encontrado")
    for key, val in atualizacao.items():
        df_alunos.at[idx[0], key] = val
    return {"mensagem": "Aluno atualizado"}